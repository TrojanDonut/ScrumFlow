---
description: 
globs: 
---
We have to make a simple web app for Scrum workflow. The details are listed in the user stories, numbered below.
We would like to use django for backend, react for frontend. The environment should have both dev and prod. Everything should be on git, where a team of 4 people is going to implement changes. We are not sure yet if everyone should run locally this app or on a single server managed by git. Let's say local for now.

User stories(you can upgrade these if u find any edge cases):
#1 - Dodajanje uporabnikov (must have)
Administrator sistema lahko vnaša nove uporabnike v sistem.

Določi jim uporabniško ime in geslo, osebne podatke (ime, priimek, e-pošta) in sistemske pravice (administrator sistema, uporabnik sistema).

# Preveri dodajanje novega uporabnika skupaj s pripadajočimi podatki.

# Preveri dodajanje uporabnika z obstoječim uporabniškim imenom.

# Preveri, ali sistem upošteva dodeljene sistemske pravice.

#2 - Vzdrževanje uporabniških računov (Could have)
Administrator sistema lahko ureja in briše obstoječe uporabnike sistema. Spremeni jim lahko uporabniško ime, osebne podatke, geslo in sistemske pravice.

# Preveri brisanje obstoječega uporabnika.

# Preveri morebitno podvajanje pri spremembi uporabniškega imena.

# Preveri možnost spreminjanja osebnih podatkov uporabnika.

# Preveri spremembo gesla obstoječega uporabnika.

# Preveri spremembo sistemskih pravic za nekega uporabnika.

#3 - Spreminjanje lastnih uporabniških podatkov (Could have)
Uporabnik sistema lahko za svoj uporabniški račun spreminja uporabniško ime, geslo in druge osebne podatke.

# Preveri spremembo uporabniškega imena in morebitno podvajanje.

# Preveri spremembo gesla.

# Preveri spremembo drugih osebnih podatkov.

#4 - Dodajanje projekta (Must have)
Administrator lahko ustvari nov projekt, izbere uporabnike za delo na tem projektu in določi njihove projektne vloge (produktni vodja, skrbnik metodologije, član razvojne skupine).

# Preveri dodajanje novega projekta in morebitno podvajanje imen projektov.

# Preveri izbiro uporabnikov za delo na projektu.

# Preveri določitev projektnih vlog.

#5 - Vzdrževanje projekta (Should have)
Administrator sistema in skrbnik metodologije lahko urejata lastnosti že obstoječega projekta, dodajata nove člane v projekt, urejata vloge obstoječih članov v projektu in odstranjujeta člane iz projekta.

# Preveri dodajanje novega člana projektne skupine.

# Preveri odvzemanje člana iz projektne skupine.

# Preveri spreminjanje vlog članov.

# Preveri spremembo imena projekta in morebitno podvajanje.

#6 - Ustvarjanje novega Sprinta (Must have)
Skrbnik metodologije lahko ustvari nov Sprint. Določi mu začetni in končni datum ter pričakovano hitrost.

# Preveri običajen potek: dodaj nov Sprint, določi mu začetni in končni datum (v prihodnosti) in nastavi začetno hitrost.

# Preveri za primer, ko je končni datum pred začetnim.

# Preveri za primer, ko je začetni datum v preteklosti.

# Preveri za neregularno vrednost hitrosti Sprinta.

# Preveri za primer, ko se dodani Sprint prekriva s katerim od obstoječih.

#7 - Vzdrževanje obstoječih Sprintov (Should have)
Skrbnik metodologije lahko ureja ali briše Sprinte, ki se še niso pričeli.

# Preveri spremembo datuma in morebitne posledice (končni datum pred začetnim, prekrivanje z nekim drugim Sprintom, datum v preteklosti, ...).

# Preveri spremembo hitrosti Sprinta.

#8 - Dodajanje uporabniških zgodb (Must have)
Produktni vodja in skrbnik metodologije lahko vnašata nove uporabniške zgodbe v že obstoječ projekt.

Za vsako zgodbo lahko določita njeno ime, besedilo, sprejemne teste, prioriteto (must have, could have, should have, won't have this time) in poslovno vrednost.

# Preveri regularen potek.

# Preveri podvajanje imena uporabniške zgodbe.

# Preveri ustrezno določitev prioritete uporabniške zgodbe.

# Preveri za neregularen vnos poslovne vrednosti.

#9 - Urejanje in brisanje uporabniških zgodb (Should have)
Produktni vodja in skrbnik metodologije lahko urejata in brišeta tiste uporabniške zgodbe v projektu, ki še niso realizirane in niso dodeljene nobenemu Sprintu.

# Preveri regularen potek.

# Preveri za zgodbo, ki je že bila dodeljena nekemu Sprintu.

# Preveri za zgodbo, ki je že bila realizirana.

# Preveri podvajanje pri spremembi imena uporabniške zgodbe.

#10 - Dodajanje opomb k zgodbam (Should have)
Člani razvojne skupine lahko k uporabniškim zgodbam v dogovoru s produktnim vodjo ali skrbnikom metodologije dopisujejo svoje opombe.

# Preveri regularen potek.
 
#11 - Ocena časovne zahtevnosti (Must have)
Skrbnik metodologije lahko nedodeljeni zgodbi v seznamu zahtev določi (oziroma spremeni) oceno časovne zahtevnosti.

# Preveri regularen potek.

# Preveri veljavnost ocene časovne zahtevnosti.

# Preveri za zgodbo, ki je že dodeljena nekemu Sprintu.

#12 - Planning poker (Could have)
Skrbnik metodologije lahko za nedodeljeno uporabniško zgodbo začne igro 'Planning Poker', v kateri lahko sodelujejo vsi člani projekta, prijavljeni v tistem trenutku. 

Skrbnik metodologije in razvijalci lahko oddajajo svoje ocene. Skrbnik metodologije lahko igro zaključi.

# Preveri regularen potek.
# Preveri vidnost ocen. Ocene v nekem so lahko vidne šele, ko vsi razvijalci oddajo svojo oceno.
# Preveri pravilno sosledje krogov. Nov krog se lahko začne šele, ko vsi razvijalci oddajo svojo oceno trenutnega kroga.
# Preveri vpis končne ocene. To lahko stori le skrbnik metodologije. Po vnosu ocene je igra končana.

#13 - Dodajanje zgodb v Sprint (Must have)
Skrbnik metodologije lahko dodaja nove zgodbe v Sprint.

To stori tako, da izbere dogovorjeno podmnožico zgodb v seznamu zahtev in jih dodeli Sprintu. Izbere lahko le tiste zgodbe, ki že imajo ocenjeno časovno zahtevnost in še niso bile realizirane.

# Preveri regularen potek.

# Preveri za zgodbe, ki nimajo določene ocene časovne zahtevnosti.

# Preveri za že realizirane zgodbe.

# Preveri za zgodbe, ki so že dodeljene aktivnemu Sprintu.

#14 - Dodajanje nalog (Must have)
Skrbnik metodologije in člani razvojne skupine lahko dodajajo nove naloge (tasks) k posamezni uporabniški zgodbi znotraj aktivnega Sprinta.

Določijo opis naloge, oceno časa za dokončanje naloge in po želji tudi člana ekipe za njeno realizacijo (naloga s tem še ni dodeljena, saj jo mora član ekipe prej še sprejeti).

# Preveri regularen potek.

# Preveri za zgodbo izven aktivnega Sprinta.

# Preveri za že realizirano zgodbo.

# Preveri za neregularno oceno časa.

# Preveri ustrezno dodeljevanje člana razvojne skupine.

#15 - Vzdrževanje obstoječih nalog (Should have)
Skrbnik metodologije in člani razvojne skupine lahko urejajo vse parametre in brišejo obstoječe naloge (tasks) pri posameznih uporabniških zgodbah.

# Preveri regularen potek.

# * Preveri brisanje naloge, ki jo je nek razvijalec že sprejel.

#16 - Sprejemanje nalog (Must have)
Član razvojne skupine lahko sprejme še nedodeljeno nalogo aktivnega Sprinta v delo.

Naloga se označi kot dodeljena, s tem pa se prepreči, da bi jo lahko sprejel še kak drug član.

# Preveri regularen potek.

# Preveri za nalogo, ki jo je že sprejel nek drug razvijalec.

# * Preveri za nalogo, ki danemu članu razvojne skupine ni bila dodeljena.

#17 - Odpovedovanje nalogam (Must have)
Član razvojne skupine se lahko že sprejeti nalogi odreče in s tem omogoči, da delo na njej nadaljuje kak drug član.

# Preveri regularen potek.

# Preveri za nalogo, ki je član razvojne skupine ni sprejel.

# * Preveri, ali lahko odpovedano nalogo prevzame nek drug razvijalec.

#18 - Beleženje porabe časa (Must have)
Član razvojne skupine lahko beleži porabo časa na neki nalogi. (lahko prične z delom na nalogi, ki jo je sprejel. Ob tem se zažene števec časa, ki beleži čas njegovega dela. Naloga se označi kot aktivna).

(avtomatsko, samodejno)

Član razvojne skupine lahko konča delo na trenutno aktivni nalogi. Ob tem se števec časa zaključi, vloženo delo (število ur) pa se zabeleži v bazo. V primeru, da je ta član v istem dnevu že delal na tej nalogi, se število ur le prišteje k že obstoječemu vpisu.

# Preveri regularen potek.

# Preveri veljavnost vnesenega časa.

# * Preveri za zgodbo, ki je razvijalec ni sprejel.

# * Preveri za že zaključene zgodbe.

#19 - Pregledovanje in spreminjanje časovnega poteka dela (Should have)
Član skupine lahko pregleduje in dopolnjuje preglednico svojega dela na nalogah v tekočem dnevu in v preteklih dnevih. 

Lahko popravlja število vloženih ur na posamezni nalogi za posamezni dan. Prav tako lahko po svoji presoji določa potrebno število ur za dokončanje naloge.

# Preveri regularen potek.

# Preveri veljavnost vnesenega časa.

# * Preveri za zgodbo, ki je razvijalec ni sprejel.

# * Preveri za že zaključene zgodbe.

#20 - Zaključevanje nalog (Must have)
Član skupine lahko označi svojo nalogo kot zaključeno.

# Preveri regularen potek.

# Preveri za že zaključeno zgodbo.

# * Preveri za zgodbo, ki je razvijalec ni sprejel.

#21 - Vzdrževanje uporabniške dokumentacije (Could have)
Vsi sodelujoči na projektu lahko urejajo uporabniško dokumentacijo za projekt. Lahko jo tudi uvozijo ali izvozijo v nek standarden besedilni format.

# Preveri urejanje dokumentacije.

# Preveri pravilen uvoz podatkov.

# Preveri izvoz dokumentacije.

#22 - Objavljanje na projektnem zidu (Could have)
Vsi sodelujoči na projektu lahko na projektni zid pripenjajo nove objave.

# Preveri regularen potek.

#23 - Komentiranje objav na projektnem zidu
Vsi sodelujoči na projektu lahko komentirajo objave na projektnem zidu.

# Preveri regularen potek.

#24 - Brisanje objav in komentarjev na projektnem zidu (Could have)
Skrbnik metodologije lahko briše objave in komentarje na projektnem zidu.

# Preveri regularen potek.
# Preveri brisanje objave s komentarji. Ob brisanju objave, se morajo izbrisati tudi vsi komentarji pri tej objavi.
 
#25 - Potrjevanje zgodb (Must have)
Produktni vodja lahko ob koncu Sprinta označi uporabniške zgodbe, ki so prestale potrditveni test, kot realizirane.

# Preveri regularen potek.

# Preveri za že potrjene zgodbe.

# Preveri za zgodbe izven tekočega Sprinta.

# * Preveri za že zavrnjene zgodbe.

# * Preveri za zgodbe, ki še niso označene kot zaključene.

#26 - Zavračanje zgodb (Must have)
Produktni vodja lahko ob koncu Sprinta uporabniške zgodbe, ki niso prestale potrditvenega testa ali še niso dokončane, vrne v seznam zahtev kot nerealizirane, pri čemer lahko k zgodbi doda tudi svoj komentar.

# Preveri regularen potek.

# Preveri za že zavrnjene zgodbe.

# Preveri za zgodbe izven tekočega Sprinta.

# * Preveri za že potrjene zgodbe.

#27 - Seznam zahtev (Must have)
Vsi člani projekta si lahko ogledajo seznam zahtev (Product Backlog), kjer so zbrane vse uporabniške zgodbe projekta.

Zgodbe so jasno razdeljene v dve kategoriji – realizirane (zgodba je realizirana in sprejemni test je bil uspešno opravljen), in nerealizirane (vse ostale zgodbe).

Nerealizirane zgodbe so še naprej ločene na dodeljene (pripadajo aktivnemu Sprintu) in nedodeljene (vse ostale).

# Pripravi nekaj zgodb za vsako kategorijo in preveri izpis seznama zahtev.

#28 - Seznam nalog (Must have)
Vsi člani projekta si lahko ogledajo seznam nalog (Sprint Backlog), kjer so zbrane uporabniške zgodbe in naloge aktivnega sprinta.

Naloge so razdeljene v štiri kategorije:

nedodeljene,

dodeljene,

zaključene in

aktivne (t.j. na njih poteka delo v tem trenutku).

# Pripravi nekaj nalog za vsako kategorijo in preveri izpis seznama nalog.

#30 - Prijava v sistem (Must have)
Uporabnik se lahko prijavi v sistem z uporabniškim imenom in geslom. 

# Preveri s pravilnim uporabniškim imenom in geslom. 
# Preveri s pravilnim uporabniškim imenom in napačnim geslom. 
# Preveri z napačnim uporabniškim imenom in pravilnim geslom.  
# Preveri, da so stalno vidni podatki o prijavljenem uporabniku in njegovi zadnji prijavi.

# Preveri da je geslo dolgo vsaj 12 znakov. 
# Preveri, da je onemogočen vnos gesla najmanj 64 znakov, več kot 128 znakov dolgo geslo je prepovedano.
# Preveri, da se gesla ne krajšajo (večkratni space je lahko enojni space). 
# Preveri da uporabnik lahko spremeni geslo. 
# Preveri, da zamenjava gesla zahteva staro in novo geslo. 
# Preveri da ima aplikacija funkcijo razkritja gesla.
# preveri, da pri dolgih geslih aplikacija omogoča razkritje vsaj zadnjega znaka.
# Preveri da aplikacija vsebuje password-meter ki pomaga uporabniku nastaviti močnejše geslo. 
# Preveri da ni mogoče kopirati gesla. 
# Preveri da se gesla shranjujejo s pomočjo zgoščevalne funkcije. 
# Omogoči vsaj dvofaktoralno avtentikacijo.
# Preveri, da je vneseno geslo preverjeno s pomočjo slovarjev (da ni mogoče registrirati gesla ki je med top 100 ranljivimi).

Opomba: zelena (obvezno implementirati), oranžna in rdeča (nekaj bonus pik)
 
#29 - Diagram Burn-Down (Should have)
Vsi člani projekta si lahko ogledajo grafikon 'Burndown Chart' za celotni projekt, kjer je tabelarično in grafično prikazana primerjava vloženega dela s preostalim delom na projektu.

# Vnesi podatke o časovnem poteku dela in preveri pravilnost izrisa.

